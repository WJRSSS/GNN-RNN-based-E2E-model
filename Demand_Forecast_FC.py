import torch
import torch.nn as nn


class DemandForecastFC(nn.Module):
    """
    Based on the hidden tensor generated by the Encoder and the values
    of the covariate time series in prediction horizon
    input_size = hidden_size + covariate_size * horizon_size
    output_size: 1*horizon_size*quantile_size
    """

    def __init__(self,
                 hidden_size: int,
                 covariate_size: int,
                 horizon_size: int,
                 quantile_size: int
                ):
        super(DemandForecastFC, self).__init__()
        self.hidden_size = hidden_size
        self.covariate_size = covariate_size
        self.horizon_size = horizon_size
        self.quantile_size = quantile_size

        
        self.linear1 = nn.Linear(in_features=hidden_size + covariate_size * horizon_size,
                                 out_features=horizon_size * hidden_size * 3)

        self.linear2 = nn.Linear(in_features=horizon_size * hidden_size * 3,
                                 out_features=horizon_size * hidden_size * 2)

        self.linear3 = nn.Linear(in_features=horizon_size * hidden_size * 2,
                                 out_features=horizon_size * quantile_size)

        self.activation = nn.GELU()

    def forward(self, input):
        layer1_output = self.linear1(input)
        layer1_output = self.activation(layer1_output)

        layer2_output = self.linear2(layer1_output)
        layer2_output = self.activation(layer2_output)

        layer3_output = self.linear3(layer2_output)
        layer3_output = self.activation(layer3_output)
        return layer3_output
